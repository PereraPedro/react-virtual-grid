{"version":3,"sources":["../src/grid-calculator.js"],"names":[],"mappings":"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","file":"grid-calculator.js","sourcesContent":["export default class GridCalculator {\n  constructor() {\n    this.invalidate();\n  }\n\n  set fixedColumnCount(count) {\n    this._fixedColumnCount = count;\n    this.invalidate();\n  }\n\n  set fixedHeaderCount(count) {\n    this._fixedHeaderCount = count;\n    this.invalidate();\n  }\n\n  set estimatedColumnWidth(width) {\n    this._estimatedColumnWidth = width;\n    this.invalidate();\n  }\n\n  set estimatedRowHeight(height) {\n    this._estimatedRowHeight = height;\n    this.invalidate();\n  }\n\n  getSize(index, cache, calculateSize, estimatedSize) {\n    let customSize = cache[index];\n\n    if (customSize == null) {\n      customSize = cache[index] = calculateSize(index);\n    }\n\n    return (customSize != null ? customSize : estimatedSize);\n  }\n\n  cellsWithinRange(minPixel, maxPixel, estimatedSize, cache, maxCells, calculateSize) {\n    let pixel = 0;\n    let index = 0;\n\n    const sizes = [];\n\n    let found = false;\n\n    // find the first edge\n    while (!found) {\n      const size = this.getSize(index, cache, calculateSize, estimatedSize);\n\n      if (pixel + size > minPixel) {\n        found = true;\n      } else {\n        pixel += size;\n\n        ++index;\n      }\n    }\n\n    // find the other edge\n    while (maxPixel > pixel && sizes.length < maxCells && index < maxCells) {\n      const size = this.getSize(index, cache, calculateSize, estimatedSize);\n      // let customSize = cache[index];\n\n      // if (customSize == null) {\n      //   customSize = cache[index] = calculateSize(index);\n      // }\n\n      // const size = (customSize != null ? customSize : estimatedSize);\n\n      sizes.push([ index, pixel, size ]);\n\n      pixel += size;\n\n      ++index;\n    }\n\n    return sizes;\n  }\n\n  cellsWithinBounds(bounds, rowCount, columnCount) {\n    let lastRow = null;\n    let lastRowHeight = 0;\n\n    let lastColumn = null;\n    let lastColumnWidth = 0;\n\n    // fixed-top-left\n    const topLeftRows = this.cellsWithinRange(0,\n                                              1e9,\n                                              this._estimatedRowHeight,\n                                              this._heightCache,\n                                              this._fixedHeaderCount,\n                                              this.calculateRowHeight);\n\n    const topLeftColumns = this.cellsWithinRange(0,\n                                                 1e9,\n                                                 this._estimatedColumnWidth,\n                                                 this._widthCache,\n                                                 this._fixedColumnCount,\n                                                 this.calculateColumnWidth);\n\n    // fixed-left\n    if (topLeftRows.length) {\n      lastRow = topLeftRows[topLeftRows.length - 1];\n      lastRowHeight = lastRow[1] + lastRow[2];\n    }\n\n    if (topLeftColumns.length) {\n      lastColumn = topLeftColumns[topLeftColumns.length - 1];\n      lastColumnWidth = lastColumn[1] + lastColumn[2];\n    }\n\n    const leftRows = this.cellsWithinRange(bounds.top + lastRowHeight,\n                                           bounds.top + bounds.height,\n                                           this._estimatedRowHeight,\n                                           this._heightCache,\n                                           rowCount,\n                                           this.calculateRowHeight);\n\n    const leftColumns = this.cellsWithinRange(0,\n                                              1e9,\n                                              this._estimatedColumnWidth,\n                                              this._widthCache,\n                                              this._fixedColumnCount,\n                                              this.calculateColumnWidth);\n\n    // fixed-top\n    const topRows = this.cellsWithinRange(0,\n                                          1e9,\n                                          this._estimatedRowHeight,\n                                          this._heightCache,\n                                          this._fixedHeaderCount,\n                                          this.calculateRowHeight);\n\n    const topColumns = this.cellsWithinRange(bounds.left + lastColumnWidth,\n                                             bounds.left + bounds.width,\n                                             this._estimatedColumnWidth,\n                                             this._widthCache,\n                                             columnCount,\n                                             this.calculateColumnWidth);\n\n    // scrollable cells\n    const rows = this.cellsWithinRange(bounds.top + lastRowHeight,\n                                       bounds.top + bounds.height,\n                                       this._estimatedRowHeight,\n                                       this._heightCache,\n                                       rowCount,\n                                       this.calculateRowHeight);\n\n    const columns = this.cellsWithinRange(bounds.left + lastColumnWidth,\n                                          bounds.left + bounds.width,\n                                          this._estimatedColumnWidth,\n                                          this._widthCache,\n                                          columnCount,\n                                          this.calculateColumnWidth);\n\n    const minColumn = columns[0][0];\n    const maxColumn = columns[columns.length - 1][0];\n\n    const minRow = rows[0][0];\n    const maxRow = rows[rows.length - 1][0];\n\n    const same = minColumn === this._minColumn &&\n                 maxColumn === this._maxColumn &&\n                 minRow === this._minRow &&\n                 maxRow === this._maxRow;\n\n    this._minColumn = minColumn;\n    this._maxColumn = maxColumn;\n    this._minRow = minRow;\n    this._maxRow = maxRow;\n\n    return {\n      changed: !same,\n\n      columns: columns,\n      rows: rows,\n\n      topLeftRows: topLeftRows,\n      topLeftColumns: topLeftColumns,\n\n      leftRows: leftRows,\n      leftColumns: leftColumns,\n\n      topRows: topRows,\n      topColumns: topColumns\n    };\n  }\n\n  invalidate() {\n    this._widthCache = {};\n    this._heightCache = {};\n    this._minColumn = null;\n    this._maxColumn = null;\n    this._minRow = null;\n    this._maxRow = null;\n  }\n}\n"]}