{"version":3,"sources":["../src/grid-calculator.js"],"names":["GridCalculator","invalidate","getSize","index","cache","calculateSize","estimatedSize","customSize","cellsWithinRange","minPixel","maxPixel","maxCells","pixel","sizes","found","size","length","push","fixedCellsWithinRange","fixedCellCount","count","cellIndex","cellsWithinBounds","bounds","rowCount","columnCount","lastTopRow","lastTopRowBottom","lastBottomRow","lastBottomRowTop","lastRightColumn","lastRightColumnLeft","lastTopColumn","lastTopColumnRight","scrollableRowCount","scrollableColumnCount","topLeftRows","_estimatedRowHeight","_heightCache","_fixedHeaderCount","calculateRowHeight","topLeftColumns","_estimatedColumnWidth","_widthCache","_fixedLeftColumnCount","calculateColumnWidth","bottomLeftRows","_fixedFooterCount","bottomLeftColumns","leftRows","top","height","leftColumns","topRightRows","topRightColumns","_fixedRightColumnCount","bottomRightRows","bottomRightColumns","rightRows","rightColumns","topRows","topColumns","left","width","rows","columns","bottomRows","bottomColumns","minColumn","maxColumn","minRow","maxRow","same","_minColumn","_maxColumn","_minRow","_maxRow","changed"],"mappings":"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","file":"grid-calculator.js","sourcesContent":["export default class GridCalculator {\n  constructor() {\n    this.invalidate();\n  }\n\n  set fixedLeftColumnCount(count) {\n    this._fixedLeftColumnCount = count;\n    this.invalidate();\n  }\n\n  set fixedRightColumnCount(count) {\n    this._fixedRightColumnCount = count;\n    this.invalidate();\n  }\n\n  set fixedHeaderCount(count) {\n    this._fixedHeaderCount = count;\n    this.invalidate();\n  }\n\n  set fixedFooterCount(count) {\n    this._fixedFooterCount = count;\n    this.invalidate();\n  }\n\n  set estimatedColumnWidth(width) {\n    this._estimatedColumnWidth = width;\n    this.invalidate();\n  }\n\n  set estimatedRowHeight(height) {\n    this._estimatedRowHeight = height;\n    this.invalidate();\n  }\n\n  getSize(index, cache, calculateSize, estimatedSize) {\n    let customSize = cache[index];\n\n    if (customSize == null) {\n      customSize = cache[index] = calculateSize(index);\n    }\n\n    return (customSize != null ? customSize : estimatedSize);\n  }\n\n  cellsWithinRange(minPixel, maxPixel, estimatedSize, cache, maxCells, calculateSize) {\n    let pixel = 0;\n    let index = 0;\n\n    const sizes = [];\n\n    let found = false;\n\n    // find the first edge\n    while (!found) {\n      const size = this.getSize(index, cache, calculateSize, estimatedSize);\n\n      if (pixel + size > minPixel) {\n        found = true;\n      } else {\n        pixel += size;\n\n        ++index;\n      }\n    }\n\n    // find the other edge\n    while (maxPixel > pixel && sizes.length < maxCells && index < maxCells) {\n      const size = this.getSize(index, cache, calculateSize, estimatedSize);\n\n      sizes.push([ index, pixel, size ]);\n\n      pixel += size;\n\n      ++index;\n    }\n\n    return sizes;\n  }\n\n  fixedCellsWithinRange(fixedCellCount, estimatedSize, cache, maxCells, calculateSize) {\n    const sizes = [];\n    let pixel = 0;\n\n    for (let count = fixedCellCount; count > 0; --count) {\n      const cellIndex = maxCells - count;\n\n      const size = this.getSize(cellIndex, cache, calculateSize, estimatedSize);\n\n      sizes.push([ cellIndex, pixel, size ]);\n\n      pixel += size;\n    }\n\n    return sizes;\n  }\n\n  cellsWithinBounds(bounds, rowCount, columnCount) {\n    let lastTopRow = null;\n    let lastTopRowBottom = 0;\n\n    let lastBottomRow = null;\n    let lastBottomRowTop = 0;\n\n    let lastRightColumn = null;\n    let lastRightColumnLeft = 0;\n\n    let lastTopColumn = null;\n    let lastTopColumnRight = 0;\n\n    const scrollableRowCount = rowCount;\n    const scrollableColumnCount = columnCount;\n\n    // fixed-top-left\n    const topLeftRows = this.cellsWithinRange(0,\n                                              1e9,\n                                              this._estimatedRowHeight,\n                                              this._heightCache,\n                                              this._fixedHeaderCount,\n                                              this.calculateRowHeight);\n\n    const topLeftColumns = this.cellsWithinRange(0,\n                                                 1e9,\n                                                 this._estimatedColumnWidth,\n                                                 this._widthCache,\n                                                 this._fixedLeftColumnCount,\n                                                 this.calculateColumnWidth);\n\n    // fixed-left\n    if (topLeftRows.length) {\n      lastTopRow = topLeftRows[topLeftRows.length - 1];\n      lastTopRowBottom = lastTopRow[1] + lastTopRow[2];\n    }\n\n    if (topLeftColumns.length) {\n      lastTopColumn = topLeftColumns[topLeftColumns.length - 1];\n      lastTopColumnRight = lastTopColumn[1] + lastTopColumn[2];\n    }\n\n    // fixed-bottom-left\n    const bottomLeftRows = this.fixedCellsWithinRange(this._fixedFooterCount,\n                                                      this._estimatedRowHeight,\n                                                      this._heightCache,\n                                                      rowCount,\n                                                      this.calculateRowHeight);\n\n    const bottomLeftColumns = this.cellsWithinRange(0,\n                                                    1e9,\n                                                    this._estimatedColumnWidth,\n                                                    this._widthCache,\n                                                    this._fixedLeftColumnCount,\n                                                    this.calculateColumnWidth);\n\n    if (bottomLeftRows.length) {\n      lastBottomRow = bottomLeftRows[bottomLeftRows.length - 1];\n      lastBottomRowTop = lastBottomRow[1] + lastBottomRow[2];\n    }\n\n    const leftRows = this.cellsWithinRange(bounds.top + lastTopRowBottom,\n                                           bounds.top + bounds.height - lastBottomRowTop,\n                                           this._estimatedRowHeight,\n                                           this._heightCache,\n                                           scrollableRowCount,\n                                           this.calculateRowHeight);\n\n    const leftColumns = this.cellsWithinRange(0,\n                                              1e9,\n                                              this._estimatedColumnWidth,\n                                              this._widthCache,\n                                              this._fixedLeftColumnCount,\n                                              this.calculateColumnWidth);\n\n    // fixed-top-right\n    const topRightRows = this.cellsWithinRange(0,\n                                               1e9,\n                                               this._estimatedRowHeight,\n                                               this._heightCache,\n                                               this._fixedHeaderCount,\n                                               this.calculateRowHeight);\n\n    const topRightColumns = this.fixedCellsWithinRange(this._fixedRightColumnCount,\n                                                       this._estimatedColumnWidth,\n                                                       this._widthCache,\n                                                       columnCount,\n                                                       this.calculateColumnWidth);\n\n    // fixed-bottom-left\n    const bottomRightRows = this.fixedCellsWithinRange(this._fixedFooterCount,\n                                                       this._estimatedRowHeight,\n                                                       this._heightCache,\n                                                       rowCount,\n                                                       this.calculateRowHeight);\n\n    const bottomRightColumns = this.fixedCellsWithinRange(this._fixedRightColumnCount,\n                                                          this._estimatedColumnWidth,\n                                                          this._widthCache,\n                                                          columnCount,\n                                                          this.calculateColumnWidth);\n\n    const rightRows = this.cellsWithinRange(bounds.top + lastTopRowBottom,\n                                            bounds.top + bounds.height - lastBottomRowTop,\n                                            this._estimatedRowHeight,\n                                            this._heightCache,\n                                            scrollableRowCount,\n                                            this.calculateRowHeight);\n\n    const rightColumns = this.fixedCellsWithinRange(this._fixedRightColumnCount,\n                                                    this._estimatedColumnWidth,\n                                                    this._widthCache,\n                                                    columnCount,\n                                                    this.calculateColumnWidth);\n\n    if (bottomRightColumns.length) {\n      lastRightColumn = bottomRightColumns[bottomRightColumns.length - 1];\n      lastRightColumnLeft = lastRightColumn[1] + lastRightColumn[2];\n    }\n\n    // fixed-top\n    const topRows = this.cellsWithinRange(0,\n                                          1e9,\n                                          this._estimatedRowHeight,\n                                          this._heightCache,\n                                          this._fixedHeaderCount,\n                                          this.calculateRowHeight);\n\n    const topColumns = this.cellsWithinRange(bounds.left + lastTopColumnRight,\n                                             bounds.left + bounds.width - lastRightColumnLeft,\n                                             this._estimatedColumnWidth,\n                                             this._widthCache,\n                                             scrollableColumnCount,\n                                             this.calculateColumnWidth);\n\n    // scrollable cells\n    const rows = this.cellsWithinRange(bounds.top + lastTopRowBottom,\n                                       bounds.top + bounds.height - lastBottomRowTop,\n                                       this._estimatedRowHeight,\n                                       this._heightCache,\n                                       scrollableRowCount,\n                                       this.calculateRowHeight);\n\n    const columns = this.cellsWithinRange(bounds.left + lastTopColumnRight,\n                                          bounds.left + bounds.width - lastRightColumnLeft,\n                                          this._estimatedColumnWidth,\n                                          this._widthCache,\n                                          scrollableColumnCount,\n                                          this.calculateColumnWidth);\n\n    // fixed-bottom\n    const bottomRows = this.fixedCellsWithinRange(this._fixedFooterCount,\n                                                  this._estimatedRowHeight,\n                                                  this._heightCache,\n                                                  rowCount,\n                                                  this.calculateRowHeight);\n\n    const bottomColumns = this.cellsWithinRange(bounds.left + lastTopColumnRight,\n                                                bounds.left + bounds.width - lastRightColumnLeft,\n                                                this._estimatedColumnWidth,\n                                                this._widthCache,\n                                                scrollableColumnCount,\n                                                this.calculateColumnWidth);\n\n    const minColumn = columns.length ? columns[0][0] : null;\n    const maxColumn = columns.length ? columns[columns.length - 1][0] : null;\n\n    const minRow = rows.length ? rows[0][0] : null;\n    const maxRow = rows.length ? rows[rows.length - 1][0] : null;\n\n    const same = minColumn === this._minColumn &&\n                 maxColumn === this._maxColumn &&\n                 minRow === this._minRow &&\n                 maxRow === this._maxRow;\n\n    this._minColumn = minColumn;\n    this._maxColumn = maxColumn;\n    this._minRow = minRow;\n    this._maxRow = maxRow;\n\n    return {\n      changed: !same,\n\n      columns: columns,\n      rows: rows,\n\n      topLeftRows: topLeftRows,\n      topLeftColumns: topLeftColumns,\n\n      topRightRows: topRightRows,\n      topRightColumns: topRightColumns,\n\n      bottomLeftRows: bottomLeftRows,\n      bottomLeftColumns: bottomLeftColumns,\n\n      bottomRightRows: bottomRightRows,\n      bottomRightColumns: bottomRightColumns,\n\n      leftRows: leftRows,\n      leftColumns: leftColumns,\n\n      rightRows: rightRows,\n      rightColumns: rightColumns,\n\n      topRows: topRows,\n      topColumns: topColumns,\n\n      bottomRows: bottomRows,\n      bottomColumns: bottomColumns\n    };\n  }\n\n  invalidate() {\n    this._widthCache = {};\n    this._heightCache = {};\n    this._minColumn = null;\n    this._maxColumn = null;\n    this._minRow = null;\n    this._maxRow = null;\n  }\n}\n"]}