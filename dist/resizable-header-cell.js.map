{"version":3,"sources":["../src/resizable-header-cell.jsx"],"names":[],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;;;IAEqB,Y;;;;;;;;;eAOZ,K,kBAAM,O,EAAS;AAAA,gCACH,uBADG;AAAA,QACb,MADa,yBACb,MADa;;;AAGpB,QAAM,OAAO,CAAE,OAAF,EAAY,GAAZ,CAAgB,UAAC,CAAD,EAAO;AAClC,UAAI,WAAW,IAAf,EAAqB;AACnB,eAAO,iBAAiB,OAAO,OAAxB,GAAkC,IAAlC,IAA0C,EAAE,KAAF,IAAW,EAArD,IAA2D,QAAlE;AACD;;AAED,aAAO,IAAP;AACD,KANY,CAAb;;AAQA,QAAM,QAAQ,uBAAQ,iBAAE,OAAF,CAAU,IAAV,CAAR,CAAd;;AAEA,QAAI,WAAW,CAAf;;AAEA,yBAAmB,KAAnB,kHAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAf,IAAe;;AACxB,iBAAW,KAAK,GAAL,CAAS,QAAT,EAAmB,KAAK,KAAxB,CAAX;AACD;;AAED,WAAO,EAAE,OAAO,KAAK,IAAL,CAAU,QAAV,CAAT,EAAP;AACD,G;;yBAED,M,qBAAS;AAAA,iCACU,uBADV;AAAA,QACA,MADA,0BACA,MADA;;;AAGP,WACE;AAAA;MAAA,EAAK,OAAO,KAAK,KAAL,CAAW,KAAvB;AACK,mBAAW,0BAAG,KAAK,KAAL,CAAW,SAAd,EAAyB,OAAO,SAAhC,CADhB;MAEG,KAAK,KAAL,CAAW,OAAX,CAAmB;AAFtB,KADF;AAMD,G;;;EAtCuC,gBAAM,S;;AAA3B,Y,CACZ,S,GAAY;AACjB,SAAO,gBAAM,SAAN,CAAgB,UAAhB,CAA2B,MAA3B,CADU;AAEjB,aAAW,gBAAM,SAAN,CAAgB,MAFV;AAGjB,WAAS,gBAAM,SAAN,CAAgB,UAAhB,uBAAoC;AAH5B,C;kBADA,Y;;;AAyCrB,IAAM;AAAA;AAAA;AAAA,CAAN;;AAiBA,wBAAwB,MAAxB,GAAiC,MAAjC","file":"resizable-header-cell.js","sourcesContent":["import React from 'react';\nimport cx from 'classnames';\nimport _ from 'lodash';\nimport { Element } from 'fulcrum-core';\n\nimport measure from '../measure';\n\nexport default class ResizeHandle extends React.Component {\n  static propTypes = {\n    style: React.PropTypes.instanceOf(Object),\n    className: React.PropTypes.string,\n    element: React.PropTypes.instanceOf(Element).isRequired\n  };\n\n  static width(element) {\n    const {styles} = SimpleElementHeaderCell;\n\n    const html = [ element ].map((e) => {\n      if (element != null) {\n        return '<div class=\"' + styles.measure + '\">' + (e.label || '') + '</div>';\n      }\n\n      return null;\n    });\n\n    const rects = measure(_.compact(html));\n\n    let maxWidth = 0;\n\n    for (const rect of rects) {\n      maxWidth = Math.max(maxWidth, rect.width);\n    }\n\n    return { width: Math.ceil(maxWidth) };\n  }\n\n  render() {\n    const {styles} = SimpleElementHeaderCell;\n\n    return (\n      <div style={this.props.style}\n           className={cx(this.props.className, styles.container)}>\n        {this.props.element.label}\n      </div>\n    );\n  }\n}\n\nconst styles = cssInJS({\n  container: {\n    padding: 8,\n    textAlign: 'left',\n    fontSize: 14,\n    fontWeight: 'bold'\n  },\n\n  measure: {\n    padding: 8,\n    textAlign: 'left',\n    fontSize: 14,\n    fontWeight: 'bold',\n    border: '1px solid #000'\n  }\n});\n\nSimpleElementHeaderCell.styles = styles;\n"]}